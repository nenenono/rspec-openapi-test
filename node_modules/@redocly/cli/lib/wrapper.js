"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.commandWrapper = void 0;
const openapi_core_1 = require("@redocly/openapi-core");
const update_version_notifier_1 = require("./update-version-notifier");
const utils_1 = require("./utils");
const lint_1 = require("./commands/lint");
function commandWrapper(commandHandler) {
    return (argv) => __awaiter(this, void 0, void 0, function* () {
        let code = 2;
        let hasConfig;
        let telemetry;
        try {
            if (argv.config && !openapi_core_1.doesYamlFileExist(argv.config)) {
                utils_1.exitWithError('Please, provide valid path to the configuration file');
            }
            const config = (yield utils_1.loadConfigAndHandleErrors({
                configPath: argv.config,
                customExtends: argv.extends,
                region: argv.region,
                files: argv.files,
                processRawConfig: lint_1.lintConfigCallback(argv, update_version_notifier_1.version),
            }));
            telemetry = config.telemetry;
            hasConfig = !config.styleguide.recommendedFallback;
            code = 1;
            yield commandHandler(argv, config, update_version_notifier_1.version);
            code = 0;
        }
        catch (err) {
            // Do nothing
        }
        finally {
            if (process.env.REDOCLY_TELEMETRY !== 'off' && telemetry !== 'off') {
                yield utils_1.sendTelemetry(argv, code, hasConfig);
            }
            process.once('beforeExit', () => {
                process.exit(code);
            });
        }
    });
}
exports.commandWrapper = commandWrapper;
