import { BundleOutputFormat, StyleguideConfig, RawConfig, Region, Config, Oas3Definition, Oas2Definition } from '@redocly/openapi-core';
import { Totals, Entrypoint, ConfigApis, CommandOptions } from './types';
import { Arguments } from 'yargs';
export declare function getFallbackApisOrExit(argsApis: string[] | undefined, config: ConfigApis): Promise<Entrypoint[]>;
export declare function getExecutionTime(startedAt: number): string;
export declare function printExecutionTime(commandName: string, startedAt: number, api: string): void;
export declare function pathToFilename(path: string, pathSeparator: string): string;
export declare function escapeLanguageName(lang: string): string;
export declare function langToExt(lang: string): any;
export declare class CircularJSONNotSupportedError extends Error {
    originalError: Error;
    constructor(originalError: Error);
}
export declare function dumpBundle(obj: any, format: BundleOutputFormat, dereference?: boolean): string;
export declare function saveBundle(filename: string, output: string): void;
export declare function promptUser(query: string, hideUserInput?: boolean): Promise<string>;
export declare function readYaml(filename: string): unknown;
export declare function writeYaml(data: any, filename: string, noRefs?: boolean): void;
export declare function pluralize(label: string, num: number): string;
export declare function handleError(e: Error, ref: string): void;
export declare class HandledError extends Error {
}
export declare function printLintTotals(totals: Totals, definitionsCount: number): void;
export declare function printConfigLintTotals(totals: Totals): void;
export declare function getOutputFileName(entrypoint: string, entries: number, output?: string, ext?: BundleOutputFormat): {
    outputFile: string;
    ext: BundleOutputFormat;
};
export declare function printUnusedWarnings(config: StyleguideConfig): void;
export declare function exitWithError(message: string): void;
/**
 * Checks if dir is subdir of parent
 */
export declare function isSubdir(parent: string, dir: string): boolean;
export declare function loadConfigAndHandleErrors(options?: {
    configPath?: string;
    customExtends?: string[];
    processRawConfig?: (rawConfig: RawConfig) => void | Promise<void>;
    files?: string[];
    region?: Region;
}): Promise<Config | void>;
export declare function sortTopLevelKeysForOas(document: Oas3Definition | Oas2Definition): Oas3Definition | Oas2Definition;
export declare function checkIfRulesetExist(rules: typeof StyleguideConfig.prototype.rules): void;
export declare function cleanColors(input: string): string;
export declare function sendTelemetry(argv: Arguments | undefined, exit_code: ExitCode, has_config: boolean | undefined): Promise<void>;
export declare type ExitCode = 0 | 1 | 2;
export declare type Analytics = {
    event: string;
    event_time: string;
    logged_in: boolean;
    command: string | number;
    arguments: Record<string, unknown>;
    node_version: string;
    npm_version: string;
    version: string;
    exit_code: ExitCode;
    environment?: string;
    environment_ci?: string;
    raw_input: string;
    has_config?: boolean;
};
export declare function cleanArgs(args: CommandOptions): Record<string, unknown>;
export declare function cleanRawInput(argv: string[]): string;
