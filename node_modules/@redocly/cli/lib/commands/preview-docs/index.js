"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.debounce = exports.previewDocs = void 0;
const colorette = require("colorette");
const chockidar = require("chokidar");
const openapi_core_1 = require("@redocly/openapi-core");
const utils_1 = require("../../utils");
const preview_server_1 = require("./preview-server/preview-server");
function previewDocs(argv, configFromFile) {
    return __awaiter(this, void 0, void 0, function* () {
        let isAuthorizedWithRedocly = false;
        let redocOptions = {};
        let config = yield reloadConfig(configFromFile);
        const apis = yield utils_1.getFallbackApisOrExit(argv.api ? [argv.api] : [], config);
        const api = apis[0];
        let cachedBundle;
        const deps = new Set();
        function getBundle() {
            return __awaiter(this, void 0, void 0, function* () {
                return cachedBundle;
            });
        }
        function updateBundle() {
            return __awaiter(this, void 0, void 0, function* () {
                process.stdout.write('\nBundling...\n\n');
                try {
                    const { bundle: openapiBundle, problems, fileDependencies, } = yield openapi_core_1.bundle({
                        ref: api.path,
                        config,
                    });
                    const removed = [...deps].filter((x) => !fileDependencies.has(x));
                    watcher.unwatch(removed);
                    watcher.add([...fileDependencies]);
                    deps.clear();
                    fileDependencies.forEach(deps.add, deps);
                    const fileTotals = openapi_core_1.getTotals(problems);
                    if (fileTotals.errors === 0) {
                        process.stdout.write(fileTotals.errors === 0
                            ? `Created a bundle for ${api.alias || api.path} ${fileTotals.warnings > 0 ? 'with warnings' : 'successfully'}\n`
                            : colorette.yellow(`Created a bundle for ${api.alias || api.path} with errors. Docs may be broken or not accurate\n`));
                    }
                    return openapiBundle.parsed;
                }
                catch (e) {
                    utils_1.handleError(e, api.path);
                }
            });
        }
        setImmediate(() => {
            cachedBundle = updateBundle();
        }); // initial cache
        const isAuthorized = isAuthorizedWithRedocly || redocOptions.licenseKey;
        if (!isAuthorized) {
            process.stderr.write(`Using Redoc community edition.\nLogin with redocly ${colorette.blue('login')} or use an enterprise license key to preview with the premium docs.\n\n`);
        }
        const hotClients = yield preview_server_1.default(argv.port, argv.host, {
            getBundle,
            getOptions: () => redocOptions,
            useRedocPro: isAuthorized && !redocOptions.useCommunityEdition,
        });
        const watchPaths = [api.path, config.configFile].filter((e) => !!e);
        const watcher = chockidar.watch(watchPaths, {
            disableGlobbing: true,
            ignoreInitial: true,
        });
        const debouncedUpdatedBundle = debounce(() => __awaiter(this, void 0, void 0, function* () {
            cachedBundle = updateBundle();
            yield cachedBundle;
            hotClients.broadcast('{"type": "reload", "bundle": true}');
        }), 2000);
        const changeHandler = (type, file) => __awaiter(this, void 0, void 0, function* () {
            process.stdout.write(`${colorette.green('watch')} ${type} ${colorette.blue(file)}\n`);
            if (file === config.configFile) {
                config = yield reloadConfig();
                hotClients.broadcast(JSON.stringify({ type: 'reload' }));
                return;
            }
            debouncedUpdatedBundle();
        });
        watcher.on('change', changeHandler.bind(undefined, 'changed'));
        watcher.on('add', changeHandler.bind(undefined, 'added'));
        watcher.on('unlink', changeHandler.bind(undefined, 'removed'));
        watcher.on('ready', () => {
            process.stdout.write(`\n  ðŸ‘€  Watching ${colorette.blue(api.path)} and all related resources for changes\n\n`);
        });
        function reloadConfig(config) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                if (!config) {
                    try {
                        config = (yield utils_1.loadConfigAndHandleErrors({ configPath: argv.config }));
                    }
                    catch (err) {
                        config = new openapi_core_1.Config({ apis: {}, styleguide: {} });
                    }
                }
                const redoclyClient = new openapi_core_1.RedoclyClient();
                isAuthorizedWithRedocly = yield redoclyClient.isAuthorizedWithRedocly();
                const resolvedConfig = openapi_core_1.getMergedConfig(config, argv.api);
                const { styleguide } = resolvedConfig;
                styleguide.skipPreprocessors(argv['skip-preprocessor']);
                styleguide.skipDecorators(argv['skip-decorator']);
                const referenceDocs = (_a = resolvedConfig.theme) === null || _a === void 0 ? void 0 : _a.openapi;
                redocOptions = Object.assign(Object.assign({}, referenceDocs), { useCommunityEdition: argv['use-community-edition'] || (referenceDocs === null || referenceDocs === void 0 ? void 0 : referenceDocs.useCommunityEdition), licenseKey: process.env.REDOCLY_LICENSE_KEY || (referenceDocs === null || referenceDocs === void 0 ? void 0 : referenceDocs.licenseKey), whiteLabel: true });
                return resolvedConfig;
            });
        }
    });
}
exports.previewDocs = previewDocs;
function debounce(func, wait, immediate) {
    let timeout;
    return function executedFunction(...args) {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        const context = this;
        const later = () => {
            timeout = null;
            if (!immediate)
                func.apply(context, args);
        };
        const callNow = immediate && !timeout;
        if (timeout)
            clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow)
            func.apply(context, args);
    };
}
exports.debounce = debounce;
