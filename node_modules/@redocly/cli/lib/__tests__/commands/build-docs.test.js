"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const redoc_1 = require("redoc");
const server_1 = require("react-dom/server");
const build_docs_1 = require("../../commands/build-docs");
const utils_1 = require("../../commands/build-docs/utils");
const utils_2 = require("../../utils");
jest.mock('redoc');
jest.mock('fs');
jest.mock('../../utils');
const config = {
    output: '',
    title: 'Test',
    disableGoogleFont: false,
    templateFileName: '',
    templateOptions: {},
    redocOptions: {},
};
jest.mock('react-dom/server', () => ({
    renderToString: jest.fn(),
}));
jest.mock('handlebars', () => ({
    compile: jest.fn(() => jest.fn(() => '<html></html>')),
}));
describe('build-docs', () => {
    it('should return correct html and call function for ssr', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield utils_1.getPageHTML({}, '../some-path/openapi.yaml', Object.assign(Object.assign({}, config), { redocCurrentVersion: '2.0.0' }));
        expect(server_1.renderToString).toBeCalledTimes(1);
        expect(redoc_1.createStore).toBeCalledTimes(1);
        expect(result).toBe('<html></html>');
    }));
    it('should work correctly when calling handlerBuildCommand', () => __awaiter(void 0, void 0, void 0, function* () {
        const processExitMock = jest.spyOn(process, 'exit').mockImplementation();
        yield build_docs_1.handlerBuildCommand({
            o: '',
            title: 'test',
            disableGoogleFont: false,
            template: '',
            templateOptions: {},
            theme: { openapi: {} },
            api: '../some-path/openapi.yaml',
        }, {});
        expect(redoc_1.loadAndBundleSpec).toBeCalledTimes(1);
        expect(utils_2.getFallbackApisOrExit).toBeCalledTimes(1);
        expect(processExitMock).toBeCalledTimes(0);
    }));
});
